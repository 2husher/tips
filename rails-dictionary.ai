01.
Установить ruby 2.1
* rvm install 2.2.0
Создать новый gemset для использования по умолчанию
* rvm use 2.2.0@rails4.2 --create --default
Показать все версии ruby
* rvm list
Показать текущий gemset
* rvm current
Установить rails 4.2
* gem install rails -v 4.2.0
Показать местоположения гема
* bundle show rails


Entity
* необязательные синонимы на инглише
* необязательный ассоциативное предложение

ДОМЕН
ПОЛЬЗОВАТЕЛЬ
- ник string
- имя string
- фамилия string
- почта string
- админ bool
- УРОК или СЛОВА?
= уроки пройденные(по словам отдельно)
= выученный урок
= повторенные слова
= слова для дальнейшего повторения(отмеченные)


ФИДБЕК
- ПИСЬМО обратной связи, хранится на сервере, в текстовом варианте
= или отсылать письмо мне через gmail

          Prefix Verb URI Pattern                               Controller#Action
  dictionary_all GET  /dictionary/all(.:format)                 dictionary#index
      dictionary GET  /dictionary/:letter(.:format)             dictionary#letter
  part_of_speech GET  /part_of_speech/:part_of_speech(.:format) dictionary#part_of_speech
     lessons_all GET  /lessons/all(.:format)                    lessons#all
          lesson GET  /lessons/:number(.:format)                lessons#number
translate_me_all GET  /translate_me/all(.:format)               translate_me_game#all
    translate_me GET  /translate_me/:lesson_number(.:format)    translate_me_game#translate

/category/:name/

//////////////////////////////////////////////////
Category
- name : first 600 words, second 600 words
- Lessons
- Entities (through Lessons)

Lesson
- Entities
- number

Entity
- word
- translation
- sentence
//////////////////////////////////////////////////
Letter
- Entities
- name

Letters для Category - Letter.where(category)
//////////////////////////////////////////////////
PartOfSpeech
- Entities
- name
- acronym

PartOfSpeech для Category - PartOfSpeech.where(category)
//////////////////////////////////////////////////
Dictionary - controller - для категории
Tranlate Me - controller - для урока

All Categories | Dictionary | Lessons | Tranlate Me
First 600 Words
Second 600 Words

All Categories | Dictionary | Lessons | Tranlate Me
All Categories > Dictionary
All Categories > Lessons
All Categories > Tranlate Me

First 600 Words > Lesson 1

All Categories | Dictionary | Lessons | Tranlate Me
First 600 Words > Dictionary
First 600 Words > Lessons
First 600 Words > Tranlate Me


Categories -> Lessons
First 600 words, Second 600 words ->
Random Lesson
Random Game
Random word
//////////////////////////////////////////////////

models tests

СЛОВА = model Entity
- слово string
- перевод string
- пример использования в предложении text
- часть речи string
Entity
word:string               = tempt
translation:string        = искушать(через ,-пробел)
sentence:text             = Don't tempt me.
belongs_to :part_of_speech
belongs_to :dictionary
belongs_to :lesson

model Letter
name:string
has_many :entities

PartOfSpeech
name:string
has_many :entities

СЛОВАРЬ = model Dictionary
- СЛОВА
= в алфавитном порядке EN
= в алфавитном порядке RU
= по частям речи
Dictionary
has_many :entities
= def alphabet_order_en
= def alphabet_order_ru
= def parts_of_speech


УРОК = model Lesson
- номер
- СЛОВА (10 штук)
Lesson
number:integer        = 14
has_many :entities


ИГРА-EN-RU = Game_En_Ru не нужна модель в БД, может быть контроллер
- УРОК как параметр
= случайный порядок слов из урока английский русский
= подсказка 1 - часть речи
= подсказка 2 - предложение
= ответ - перевод
Game_En_Ru


TODO: сделать search по слову, autocomplete
TODO: игра - показывать слова из урока по одному, а потом все вместе
TODO: контроллер next lesson | previous lesson
TODO: нормальное css оформление слов
TODO: paginate

ИГРЫ-RU-EN
- УРОК
= случайный порядок русский английский
= ответ - перевод

заполнить через seed или через fixtures


* rake db:migrate:reset ЛУЧШЕ rake db:reset
* UTF-8 в открытии русского файла
* нормальный prompt без перезаписывания

* Body padding required
  The fixed navbar will overlay your other content, unless you add padding to the top of the <body>. Try out your own values or use our snippet below. Tip: By default, the navbar is 50px high.
  body { padding-top: 70px; }
  Make sure to include this after the core Bootstrap CSS.

* params[:controller]

* @media (min-width: 1200px) {
    .container{
        max-width: 970px;
    }
  }

* http://jsfiddle.net/5udtC/

* button_to_function(name, function=nil, html_options={}) public уже deprecated

* In Rails 4 turbolinks is active by default.
That means, that $(document).ready() is not executed, when you load a new page.

turbolink fires a new event page:load. You can use this to run your javascript code:

$(document).on('page:load', your_start_function);
There is an excelent rails cast on turbolinks

* rails button id

* как передать @instance variable в js. Ответ: лучше не делать, один - на сервере, другой - у клиента
As far as i know there is no way to do it directly and the reason is fairly simple too, html is executed at the server side and javascript is a client side language which means its executed in your local browser, thats why if you even try to pass a variable between the two you'll have to make a request to the server, However this problem is tackled by calling an AJAX request, this AJAX request does the same thing as sending a new request to the server however it does that without refreshing or reloading the page to it gives the users the illusion that no request was made.

a guy asks a similar question here:

http://www.quora.com/Ruby-on-Rails/Can-I-pass-a-JavaScript-variable-to-a-Rails-method

and you can learn more about AJAX here:

http://www.w3schools.com/ajax/default.asp

* display:none

* includes для меньшего обращения к кэшу

* @entities = d.entities.includes(:part_of_speech).all

* = render partial: 'lesson', collection: @lessons #=> ищет в текущей папке
  http://api.rubyonrails.org/classes/ActionView/PartialRenderer.html

VS

= render @lessons #=> ищет в папке lessons/

* include paginate
http://stackoverflow.com/questions/23722851/will-paginate-associations
http://stackoverflow.com/questions/9363764/will-paginate-includes-and-ordering-by-a-joined-table
http://stackoverflow.com/questions/15007948/gem-will-paginate-ignore-include-parameter-of-activerecord-find-method
http://stackoverflow.com/questions/9215943/how-to-avoid-n1-queries-with-will-paginate
http://stackoverflow.com/questions/7315361/will-paginate-with-multiple-tables
http://rubyinrails.com/2014/03/pagination-in-rails-using-will_paginate-gem/
http://stackoverflow.com/questions/2868484/rails-using-will-paginate-with-a-complex-association-find

* PROBLEM: heroku bootstrap не работает и jQuery не работает

* css и jQuery для heroku
/config/environments/production.rb
  config.cache_classes = true
  config.serve_static_assets = true
  config.assets.compile = true
  config.assets.digest = true
/config/database.yml
  production:
    adapter: postgresql
    encoding: unicode
    database: Your_appname_production
bundle exec rake assets:precompile

* rspec test-овая база заново не создается полностью, но обнуляется и скачет постоянно id 1-2-3-4 и тд. Так и должно быть?

* haml < для удаления пробелов

* features
As described in https://www.relishapp.com/rspec/rspec-rails/docs/feature-specs/feature-spec, feature corresponds to describe and scenario corresponds to it. So, you can nest instances of feature, but you cannot nest a scenario within a scenario, just as you cannot nest an it within a it.

Nested feature with scenarios is available in Capybara version 2.2.1
In Gemfile include
  gem "capybara", "~> 2.2.1"
and bundle install
As per official documentation of Capybara
feature is in fact just an alias for describe ..., :type => :feature, background is an alias for before, scenario for it, and given/*given!* aliases for let/*let!*, respectively.
Here is the original issue and later it was accepted and merged in version 2.2.1

https://www.relishapp.com/rspec/rspec-rails/docs/feature-specs/feature-spec

* first/find
You can just use:

first('.item').click_link('Agree')
or

first('.item > a').click
(if your default selector is :css)

Code in your question doesn't work as:

within ".item" do
  first(:link, "Agree").click
end
is equivalent to:

find('.item').first(:link, "Agree").click
Capybara finds several .item's so it raises an exception. I consider this behavior of Capybara 2 very good.

*
Figured this out. SO, when looking for elements on a page you have a few methods available to you:

first('.some-selector')
all('.some-selector') #returns an array of course
find('.some-selector')
.first and .all are super useful as they let you pick from non unique elements.

HOWEVER .first and .all don't seem to auto-wait for the element to be on the page.

The Fix

The fix then is to always use .find(). .find WILL honour the capybara wait time. Using .find has almost completely fixed my tests (with a few unrelated exceptions).

The gotcha of course is that you have to use more unique selectors as .find MUST only return a single element, otherwise you'll get the infamous Capybara::Ambiguous exception

*
EDIT (23/01/2014): Nested features are available since version 2.2.1. See here

EDIT (24/07/2013): Nested features will be allowed in Capybara > 2.1.0. See here

You can't. This is what the mantainer of the gem says about it

I guess you could call this a limitation. feature can not be nested. You can use either context or describe instead, but I would suggest not going wild with these, it tends to make tests pretty unreadable.
In some other cases the convenience of this might be argued but in this specific one you should use scenario instead of the nested feature.

Also if you want to consistent and use the new DSL everywhere, use background instead of before and given instead of let.

*
# Revert changes to modified files.
git reset --hard

# Remove all untracked files and directories.
git clean -fd

* .first_or_create

* remove_index(:users, :name => 'index_users_on_email')

* display:block
    Displays an element as a block element (like <p>)

  display:inline
    Default value. Displays an element as an inline element (like <span>)

* rspec
  1. проверить доступность всех страниц по адресам в routes
  & have_link работает как regex. Ищет вхождение слова в составные линки

TODO: круговая диаграмма - соотношение noun, adjective, verbs и тд

* find(id) не может искать nil
find_by(id: nil) может обработать nil
